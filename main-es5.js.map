{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/favorites/favorites.component.ts","webpack:///src/app/components/favorites/favorites.component.html","webpack:///src/app/components/forecast/forecast.component.ts","webpack:///src/app/components/forecast/forecast.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/components/weather/weather.component.ts","webpack:///src/app/components/weather/weather.component.html","webpack:///src/app/search.pipe.ts","webpack:///src/app/services/weather.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","FavoritesComponent","ForecastComponent","weatherService","cityID","weatherSub","getTelAviv","subscribe","data","currentCity","weatherWeekSub","getFiveDaysForecast","Daily","DailyForecasts","unsubscribe","HeaderComponent","navButtons","routerLink","logo","WeatherComponent","cities","control","filteredCities","valueChanges","pipe","value","autoCompleteSearch","getCurrentConditions","getAutoCompleteSerach","map","item","LocalizedName","Key","currentConditions","icons","AccuweatherIconPipe","name","WeatherService","http","apiKey","language","baseApi","fiveDaysforecast","location","autoCompleteSerach","apikey","q","get","params","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { WeatherComponent } from './components/weather/weather.component';\r\nimport { FavoritesComponent } from './components/favorites/favorites.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: WeatherComponent},\r\n  { path: 'Favorites', component: FavoritesComponent}\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'weatherApp';\r\n}\r\n","<app-header></app-header>\r\n<section>\r\n  <router-outlet></router-outlet>\r\n</section>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { FavoritesComponent } from './components/favorites/favorites.component';\r\nimport { WeatherComponent } from './components/weather/weather.component';\r\nimport { AccuweatherIconPipe } from './search.pipe';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { ForecastComponent } from './components/forecast/forecast.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    WeatherComponent,\r\n    FavoritesComponent,\r\n    AccuweatherIconPipe,\r\n    ForecastComponent,\r\n    HeaderComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    MatAutocompleteModule,\r\n    MatInputModule,\r\n    MatSliderModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-favorites',\r\n  templateUrl: './favorites.component.html',\r\n  styleUrls: ['./favorites.component.scss']\r\n})\r\nexport class FavoritesComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n}\r\n","<p>favorites works!</p>\r\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\r\nimport { WeatherService } from '../../services/weather.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { CurrentConditions } from '../../models/current-conditions';\r\nimport { FiveDaysForecast } from '../../models/five-days-forcast';\r\n\r\n@Component({\r\n  selector: 'app-forecast',\r\n  templateUrl: './forecast.component.html',\r\n  styleUrls: ['./forecast.component.scss']\r\n})\r\nexport class ForecastComponent implements OnInit, OnDestroy {\r\n\r\n  weatherSub: Subscription;\r\n  weatherWeekSub: Subscription;\r\n\r\n  cityID: Number = 215854;\r\n  @Input () currentCity: CurrentConditions;\r\n  fiveDaysForcast: FiveDaysForecast;\r\n\r\n  constructor(private weatherService: WeatherService) { }\r\n\r\n  ngOnInit(): void {\r\n     this.weatherSub = this.weatherService.getTelAviv().subscribe((data: CurrentConditions) => {\r\n      if(!data[0]) return {};\r\n      this.currentCity = data[0];\r\n    })\r\n    this.weatherWeekSub = this.weatherService.getFiveDaysForecast(this.cityID).subscribe((data: FiveDaysForecast) => {\r\n      this.currentCity.Daily = data.DailyForecasts;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n      this.weatherWeekSub.unsubscribe();\r\n      this.weatherSub.unsubscribe();\r\n  }\r\n\r\n}\r\n","<!-- DEFAULT TELAVIV -->\r\n\r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"current\" *ngIf=\"currentCity\">\r\n        <h1>{{ currentCity.LocalObservationDateTime | date: 'fullDate' }}</h1>\r\n        <h1>{{ currentCity.WeatherText }}</h1>\r\n        <h1>{{ currentCity.Temperature.Metric.Value }}C</h1>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n  <!-- 5 DAY DEFAULT -->\r\n  <div class=\"container\">\r\n    <div class=\"row\" *ngIf=\"currentCity && currentCity.Daily\">\r\n      <div class=\"bigCard bg-light mb-3\" style=\"max-width: 18rem;\" *ngFor=\"let cityForecast of currentCity.Daily\">\r\n        <div class=\"card-header\">{{ cityForecast.Date | date: 'fullDate'}}</div>\r\n        <div class=\"card-body\">\r\n          <h2 class=\"card-title\">{{ cityForecast.Day.IconPhrase }}</h2>\r\n          <div class=\"card-icon\"><img src=\"{{cityForecast.Day.Icon | accuweatherIcon }}\"/></div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  \r\n  navButtons = [\r\n    {routerLink: '/', logo: 'Home'},\r\n    {routerLink: '/Favorites', logo: 'Favorites'}\r\n  ];\r\n}\r\n","<header>\r\n    <nav class=\"navbar navbar-expand-md stiky-top\">\r\n      <div class=\"container-fluid\">\r\n        <a class=\"navbar-brand\" routerLink=\"/\"><img src=\"../assets/pngfuel.jpg.png\"></a>\r\n        <div class=\"collapse navbar-collapse\">\r\n          <ul class=\"navbar-nav ml-auto\">\t\t\t\t\t\t\t\t\r\n            <li class=\"nav-item\" *ngFor=\"let navButton of navButtons\">\r\n              <a class=\"nav-link\" [routerLink]=\"[navButton.routerLink]\">{{ navButton.logo }}</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  </header>","import { Component, OnInit } from '@angular/core';\r\nimport { WeatherService } from '../../services/weather.service';\r\nimport { FormControl}  from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, startWith } from 'rxjs/operators';\r\nimport { AutoCompleteSearch } from '../../models/autoCompleteSearch';\r\nimport { CurrentConditions } from '../../models/current-conditions';\r\nimport { DailyForecasts, FiveDaysForecast } from '../../models/five-days-forcast';\r\n\r\n@Component({\r\n  selector: 'app-weather',\r\n  templateUrl: './weather.component.html',\r\n  styleUrls: ['./weather.component.scss']\r\n})\r\nexport class WeatherComponent implements OnInit {\r\n\r\n  search: AutoCompleteSearch[];\r\n  cities = [];\r\n  // defualt city : tel aviv\r\n  cityID: Number = 215854;\r\n  control = new FormControl();\r\n  filteredCities: Observable<string[]>;\r\n  currentCity: CurrentConditions;\r\n\r\n  constructor(private weatherService: WeatherService) { }\r\n\r\n  ngOnInit() {\r\n    this.filteredCities = this.control.valueChanges.pipe(\r\n     startWith(''),\r\n     map(value => this.autoCompleteSearch(value))\r\n    );\r\n  }\r\n\r\n  currentConditions() {\r\n    this.weatherService.getCurrentConditions(this.cityID).subscribe((data: CurrentConditions) => {\r\n      this.currentCity = data[0];\r\n    });\r\n    this.weatherService.getFiveDaysForecast(this.cityID).subscribe((data: FiveDaysForecast) => {\r\n      this.currentCity.Daily = data.DailyForecasts;\r\n    });\r\n  }\r\n\r\n  autoCompleteSearch(value: string): string[]{\r\n    this.weatherService.getAutoCompleteSerach(value).subscribe((data: any) => {\r\n      if(!data) return [];\r\n      this.cities = data.map(item => item.LocalizedName || '');\r\n      this.cityID = data[0].Key;\r\n      return data;\r\n    });\r\n    return this.cities;\r\n  }\r\n\r\n}\r\n","<div class=\"navbar navbar-light bg-light\">\r\n  <form class=\"form-inline\">\r\n    <input type=\"search\"\r\n          placeholder=\"Search for city\"\r\n          [formControl]=\"control\"\r\n          [matAutocomplete]=\"auto\"\r\n          aria-label=\"Search\"\r\n          class=\"form-control mr-sm-2\">\r\n    <button class=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"button\" (click)=\"currentConditions()\">Check Weather</button>\r\n    <mat-autocomplete #auto=\"matAutocomplete\">\r\n      <mat-option *ngFor=\"let city of filteredCities | async\" [value]=\"city\">\r\n        {{ city }}\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  </form>\r\n</div>\r\n<app-forecast [currentCity]=\"currentCity\"></app-forecast>\r\n\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nexport const icons = `https://developer.accuweather.com/sites/default/files`;\r\n\r\n@Pipe({\r\n  name: 'accuweatherIcon'\r\n})\r\nexport class AccuweatherIconPipe implements PipeTransform {\r\n\r\n\r\n  transform(value: any): any {\r\n    if (value < 10) {\r\n      value = `0${value}`;\r\n    }\r\n    return `${icons}/${value}-s.png`;\r\n  }\r\n\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WeatherService {\r\n\r\n  apiKey = 'XXhoAfdvhAdPOhjR1CbGglFN2VJMyLHa';\r\n  language = 'en-us';\r\n  baseApi = 'https://dataservice.accuweather.com';\r\n  autoCompleteSearch = 'locations/v1/cities/autocomplete';\r\n  currentConditions = 'currentconditions/v1';\r\n  fiveDaysforecast = 'forecasts/v1/daily/5day';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAutoCompleteSerach(location) {\r\n    const autoCompleteSerach = {\r\n      apikey: this.apiKey,\r\n      q: location,\r\n      language: this.language\r\n    };\r\n    return this.http.get(`${this.baseApi}/${this.autoCompleteSearch}`, {params: autoCompleteSerach});\r\n  }\r\n\r\n  getCurrentConditions(location) {\r\n    const currentConditions = {\r\n      apikey: this.apiKey,\r\n      language: this.language\r\n    }\r\n    return this.http.get(`${this.baseApi}/${this.currentConditions}/${location}`, {params: currentConditions});\r\n  }\r\n\r\n  getTelAviv() {\r\n    return this.getCurrentConditions(215854);\r\n  }\r\n\r\n  getFiveDaysForecast(location) {\r\n    const fiveDaysforecast = {\r\n      apikey: this.apiKey,\r\n      language: this.language\r\n    }\r\n    return this.http.get(`${this.baseApi}/${this.fiveDaysforecast}/${location}`, {params: fiveDaysforecast});\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}